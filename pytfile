from sklearn.metrics import confusion_matrix    
import seaborn as sns
import pydicom as dicom
main = tkinter.Tk()
main.title("Alzheimer Brain Tumor Detection using VGG16 & 19 Algorithms")
main.geometry("1300x1200")
global filename
global classifier
global labels, X, Y, X_train, y_train, X_test, y_test, vgg16_model


def uploadDataset():
global filename
global labels
labels = []
filename = filedialog.askdirectory(initialdir=".")
pathlabel.config(text=filename)
text.delete('1.0', END)
text.insert(END,filename+" loaded\n\n");
text.insert(END,"Tumor found in dataset are\n\n")
for i in range(len(labels)):
text.insert(END,labels[i]+"\n")


def processDataset():
text.delete('1.0', END)
global filename, X, Y, X_train, y_train, X_test, y_test
if os.path.exists("model/X.txt.npy"):
X = np.load('model/X.txt.npy')
Y = np.load('model/Y.txt.npy')
else:
for root, dirs, directory in os.walk(filename):
for j in range(len(directory)):
name = os.path.basename(root)
if 'Thumbs.db' not in directory[j]:
ds = dicom.dcmread(root+'/'+directory[j])
img = ds.pixel_array
img = cv2.imread("test.png")
img = cv2.resize(img, (32,32))
im2arr = np.array(img)
im2arr = im2arr.reshape(32,32,3)
X.append(im2arr)
if name == 'Normal':
Y.append(0)
else:
Y.append(1)
print(name+" "+str(label))
X = np.asarray(X)
Y = np.asarray(Y)
np.save('model/X.txt',X)
np.save('model/Y.txt',Y)
X = X.astype('float32')
X = X/255
text.insert(END,"Dataset Preprocessing Completed\n"
text.insert(END,"Total images found in dataset : "+str(X.shape[0])+"\n\n")
indices = np.arange(X.shape[0])
np.random.shuffle(indices)
X = X[indices]
Y= Y[indices]
Y = to_categorical(Y)

def close():
main.destroy()
font = ('times', 16, 'bold')
title = Label(main, text='Alzheimer Brain Tumor Detection using VGG16 & 19 
Algorithms',anchor=W, justify=CENTER)
title.config(bg='#3A3B3C', fg='white') 
title.config(font=font) 
title.config(height=3, width=120) 
title.place(x=0,y=5)
font1 = ('times', 13, 'bold')
upload = Button(main, text="Upload Dicom Alzheimer Brain Dataset", command=uploadDataset, 
bg='#3A3B3C', fg='white')
upload.place(x=50,y=100)
upload.config(font=font1) 
pathlabel = Label(main)
pathlabel.config(bg='#3A3B3C', fg='white') 
pathlabel.config(font=font1) 
pathlabel.place(x=50,y=150)
processButton = Button(main, text="Preprocess Dataset", command=processDataset, bg='#3A3B3C', 
fg='white')
processButton.place(x=50,y=200)
processButton.config(font=font1)
trainvggButton = Button(main, text="Train VGG16 Algorithm", command=trainVGG16, 
bg='#3A3B3C', fg='white')
trainvggButton.place(x=50,y=250)
trainvggButton.config(font=font1)
vggButton = Button(main, text="Train VGG19 Algorithm", command=trainVGG19, bg='#3A3B3C', 
fg='white')
vggButton.place(x=50,y=300)
vggButton.config(font=font1)
graphButton = Button(main, text="Comparison Graph", command=graph, bg='#3A3B3C', fg='white')
graphButton.place(x=50,y=350)
graphButton.config(font=font1)
predictButton = Button(main, text="AD BT NB Detection", command=predictTumor, 
bg='#3A3B3C', fg='white')
predictButton.place(x=50,y=400)
predictButton.config(font=font1)
font1 = ('times', 12, 'bold')
text=Text(main,height=25,width=78)
scroll=Scrollbar(text)
text.configure(yscrollcommand=scroll.set)
text.place(x=370,y=100)
text.config(font=font1)
main.config(bg='black')
main.mainloop()

